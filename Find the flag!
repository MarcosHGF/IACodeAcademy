import codecademylib3
import seaborn as sns
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree

#https://archive.ics.uci.edu/ml/machine-learning-databases/flags/flag.data
cols = ['name','landmass','zone', 'area', 'population', 'language','religion','bars','stripes','colours',
'red','green','blue','gold','white','black','orange','mainhue','circles',
'crosses','saltires','quarters','sunstars','crescent','triangle','icon','animate','text','topleft','botright']
df= pd.read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/flags/flag.data", names = cols)

#variable names to use as predictors
var = [ 'red', 'green', 'blue','gold', 'white', 'black', 'orange', 'mainhue','bars','stripes', 'circles','crosses', 'saltires','quarters','sunstars','triangle','animate']

#Print number of countries by landmass, or continent
print(df.landmass.value_counts())

#Create a new dataframe with only flags from Europe and Oceania
df_36 = df[df["landmass"].isin([3,6])].copy()
#print(df_36.head())

#Print the average vales of the predictors for Europe and Oceania
print(df_36.groupby('landmass')[var].mean())

#Create labels for only Europe and Oceania
labels = (df["landmass"].isin([3,6]))*1

#Print the variable types for the predictors
print(df_36[var].dtypes)

#Create dummy variables for categorical predictors
data = pd.get_dummies(df_36[var])

#Split data into a train and test set
X = data
y = df_36['landmass']
X_train, X_test, y_train, y_test = train_test_split(X,y, random_state=1, test_size=.4)

#Fit a decision tree for max_depth values 1-20; save the accuracy score in acc_depth
depths = range(1, 21)
acc_depth = []
for i in depths:
    dt = DecisionTreeClassifier(max_depth = i)
    dt.fit(X_train, y_train)
    y_pred = dt.predict(X_test)
    acc_depth.append([accuracy_score(y_test, y_pred)])

#Plot the accuracy vs depth
plt.plot(depths, acc_depth)
plt.show()

#Find the largest accuracy and the depth this occurs
l_acc = np.max(acc_depth)

#Refit decision tree model with the highest accuracy and plot the decision tree
dt = DecisionTreeClassifier(max_depth = 3)
dt.fit(X_train, y_train)
y_pred = dt.predict(X_test)
accuracy_score(y_test, y_pred)

plt.figure(figsize=(12, 12))
tree.plot_tree(dt, feature_names = X_train.columns, filled=True, label='all')
plt.tight_layout()
plt.show()

#Create a new list for the accuracy values of a pruned decision tree.  Loop through
#the values of ccp and append the scores to the list
ccp_test = np.arange(0, .05, .001)
acc_pruned = []
ccp_alphas = []

for c in ccp_test:
    dt_tuned = DecisionTreeClassifier(max_depth = 3, ccp_alpha=c)
    dt_tuned.fit(X_train, y_train)
    y_pred = dt_tuned.predict(X_test)
    # print the accuracy for each ccp_alpha value
    accuracy = accuracy_score(y_test, y_pred)
    print(f'ccp_alpha = {c}: Accuracy = {acc_pruned}')
    acc_pruned.append([accuracy])
    ccp_alphas.append([c])

#Plot the accuracy vs ccp_alpha
plt.plot(acc_pruned, ccp_alphas, marker = 'o')
plt.xlabel('accuracy')
plt.ylabel('ccp_alpha')
plt.show()

#Find the largest accuracy and the ccp value this occurs
m_al = np.max(acc_pruned)

#Fit a decision tree model with the values for max_depth and ccp_alpha found above
for c in ccp_test:
    dt_tuned = DecisionTreeClassifier(max_depth = 3, ccp_alpha=c)
    dt_tuned.fit(X_train, y_train)
    y_pred = dt_tuned.predict(X_test)

#Plot the final decision tree
plt.figure(figsize=(12, 12))
tree.plot_tree(dt_tuned, feature_names = X_train.columns, filled=True, label='all')
plt.tight_layout()
plt.show()
