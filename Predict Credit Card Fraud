import seaborn
import pandas as pd
import numpy as np
import codecademylib3
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import codecademylib3

# Load the data
transactions = pd.read_csv('transactions_modified.csv')
print(transactions.head())
print(transactions.info())

# Summary statistics on amount column
print(transactions["amount"].describe())

# Create isPayment field
def PaymentType(x):
  if (x == 'PAYMENT') or (x == 'DEBIT'):
    return 1
  return 0

vec = np.vectorize(PaymentType)
isPayment = vec(transactions['type'])
transactions['isPayment'] = isPayment

print(transactions['isPayment'].head())

# Create isMovement field
def MovementType(x):
  if (x == 'CASH_OUT') or (x == 'TRANSFER'):
    return 1
  return 0

vec = np.vectorize(MovementType)
isMovement = vec(transactions['type'])
transactions['isMovement'] = isMovement

print(transactions['isMovement'].head())

# Create accountDiff field
transactions['accountDiff'] = transactions['oldbalanceOrg'] - transactions['oldbalanceDest']

# Create features and label variables
features = transactions[['amount', 'isPayment', 'isMovement', 'accountDiff']]
#print(features)
label = transactions['isFraud']
#print(label)

# Split dataset
x_train, x_test, y_train, y_test = train_test_split(features, label, test_size = 0.3)

# Normalize the features variables
scaler = StandardScaler()
x_train_s = scaler.fit_transform(x_train)
x_test_s = scaler.transform(x_test)

print("Scaler", scaler)
# Fit the model to the training data
lr = LogisticRegression()
lr.fit(x_train_s, y_train)


# Score the model on the training data
print(lr.score(x_train_s, y_train))

# Score the model on the test data
print(lr.score(x_test_s, y_test))

# Print the model coefficients
print(lr.coef_)

# New transaction data
transaction1 = np.array([123456.78, 0.0, 1.0, 54670.1])
transaction2 = np.array([98765.43, 1.0, 0.0, 8524.75])
transaction3 = np.array([543678.31, 1.0, 0.0, 510025.5])

# Create a new transaction
transaction1 = np.array([123456.78, 0.0, 1.0, 54670.1])
transaction2 = np.array([98765.43, 1.0, 0.0, 8524.75])
transaction3 = np.array([543678.31, 1.0, 0.0, 510025.5])
your_transaction = np.array([653862.64, 0.0, 1.0, 543091.7])

# Combine new transactions into a single array
sample_transactions = np.array([transaction1, transaction2, transaction3, your_transaction])

# Normalize the new transactions
sample_transactions = scaler.transform(sample_transactions)

# Predict fraud on the new transactions
print(lr.predict(sample_transactions))

# Show probabilities on the new transactions
print(lr.predict_proba(sample_transactions))
